{"version":3,"sources":["components/Toggle.jsx","App.js","reportWebVitals.js","index.js"],"names":["Toggle","arr","num","checked","setEstados","className","type","onChange","e","length","target","push","shift","est","i","est1","App","useState","estados","style0","fontWeight","style1","style2","style","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iPAqCeA,G,MAlCA,SAAC,GAAkC,IAAjCC,EAAgC,EAAhCA,IAAIC,EAA4B,EAA5BA,IAAIC,EAAwB,EAAxBA,QAAQC,EAAgB,EAAhBA,WAC7B,OACI,mCACI,wBAAOC,UAAU,SAAjB,UACI,uBAAOC,KAAK,WAAWH,QAASA,EAAQD,GAAMK,SAC1C,SAACC,GACMP,EAAIQ,OAAS,GAAKD,EAAEE,OAAOP,QAC1BF,EAAIU,KAAKT,GACW,IAAfD,EAAIQ,QAAgBD,EAAEE,OAAOP,UAClCF,EAAIW,QACJX,EAAIU,KAAKT,IAGb,IADA,IAAMW,EAAM,EAAC,GAAM,GAAM,GACjBC,EAAE,EAAEA,EAAEb,EAAIQ,OAAOK,IACT,IAATb,EAAIa,GACHD,EAAI,IAAK,EAEI,IAATZ,EAAIa,GACRD,EAAI,IAAK,EAEI,IAATZ,EAAIa,KACRD,EAAI,IAAK,GAIjBT,GAAW,SAAAW,GAAI,OAAIF,QAG3B,sBAAMR,UAAU,wBC3B1BJ,G,MAAM,IAmBGe,MAjBf,WAAgB,IAAD,EACgBC,mBAAS,EAAC,GAAM,GAAM,IADtC,mBACNC,EADM,KACEd,EADF,KAEPe,EAAS,CAACC,WAAYF,EAAQ,GAAI,OAAS,MAC3CG,EAAS,CAACD,WAAYF,EAAQ,GAAI,OAAS,MAC3CI,EAAS,CAACF,WAAYF,EAAQ,GAAI,OAAS,MACjD,OACE,0BAASb,UAAU,YAAnB,UACE,cAAC,EAAD,CAAQJ,IAAKA,EAAKC,IAAK,EAAGC,QAASe,EAASd,WAAYA,IACxD,mBAAGC,UAAU,OAAOkB,MAAOJ,EAA3B,kBACA,cAAC,EAAD,CAAQlB,IAAKA,EAAKC,IAAK,EAAGC,QAASe,EAASd,WAAYA,IACxD,mBAAGC,UAAU,OAAOkB,MAAOF,EAA3B,mBACA,cAAC,EAAD,CAAQpB,IAAKA,EAAKC,IAAK,EAAGC,QAASe,EAASd,WAAYA,IACxD,mBAAGC,UAAU,OAAOkB,MAAOD,EAA3B,sBCNSE,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.afed381a.chunk.js","sourcesContent":["import React from 'react'\nimport '../css/Toggle.css'\n\nconst Toggle = ({arr,num,checked,setEstados}) => {\n    return (\n        <>\n            <label className=\"switch\">\n                <input type=\"checkbox\" checked={checked[num]} onChange={\n                    (e)=>{\n                        if(arr.length < 2 && e.target.checked){\n                            arr.push(num)\n                        }else if(arr.length === 2 && e.target.checked){\n                            arr.shift()\n                            arr.push(num)\n                        }\n                        const est = [false,false,false]\n                        for(let i=0;i<arr.length;i++){\n                            if(arr[i]===0){\n                                est[0] = true\n                            }\n                            else if(arr[i]===1){\n                                est[1] = true\n                            }\n                            else if(arr[i]===2){\n                                est[2] = true\n                            }\n                        }\n\n                        setEstados(est1 => est)\n                    }\n                }/>\n                <span className=\"slider round\"></span>\n            </label>\n        </>\n    )\n}\n\nexport default Toggle","import { useState } from 'react';\nimport Toggle from './components/Toggle'\nimport './css/App_mio.css'\n\nconst arr = []\n\nfunction App() {\n  const [estados,setEstados] = useState([false,false,false])\n  const style0 = {fontWeight: estados[0]? \"bold\" : null}\n  const style1 = {fontWeight: estados[1]? \"bold\" : null}\n  const style2 = {fontWeight: estados[2]? \"bold\" : null}\n  return (\n    <section className=\"container\">\n      <Toggle arr={arr} num={0} checked={estados} setEstados={setEstados}/>\n      <p className=\"word\" style={style0}>Fast</p>\n      <Toggle arr={arr} num={1} checked={estados} setEstados={setEstados}/>\n      <p className=\"word\" style={style1}>Cheap</p>\n      <Toggle arr={arr} num={2} checked={estados} setEstados={setEstados}/>\n      <p className=\"word\" style={style2}>Good</p>\n    </section>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}